"0",""
"0","# One super neat package in R that really unlocks its power is the purrr package."
"0","# We would normally iterate using a for-loop-ish structure through our URLs, parsing one at a time. We can set up instead a mapping function to do this for us that takes in a list of URLs, and for each item int he list, scrapes the URL for the necessary parts, and then returns a corresponding tibble for each URL - packaged as one consise list of tibbles."
"0",""
"0","map_reference_tibble <- function(url) {"
"0","  "
"0","  # Uncomment this line for individual testing."
"0","  #asop_url <- final_asop_summary_table$asop_urls[42]"
"0","  asop_url <- url"
"0","  asop_html <- read_html(asop_url)"
"0","  asop_content <- toString(html_text(html_nodes(asop_html, "".sentry p"")))"
"0","  "
"0","  # Regex is always amazing and elegant and fast."
"0","  asop_refs <- str_match_all(asop_content, ""(?<=ASOP No. )[:digit:]{1,2}"") %>% "
"0","    unlist() %>% "
"0","    tibble(asop_refs = .)"
"0","  "
"0","  # Need to cover when multiple ASOPs are referenced, too:"
"0","  asop_mult_refs1 <- str_match_all(asop_content, ""(?<=ASOP Nos. )[:digit:]{1,2}"") %>% "
"0","    unlist() %>% "
"0","    tibble(asop_refs = .)"
"0","  asop_mult_refs2 <- str_match_all(asop_content, ""(?<=ASOP Nos. [:digit:]{1,2} and )[:digit:]{1,2}"") %>% "
"0","    unlist() %>% "
"0","    tibble(asop_refs = .)"
"0","  "
"0","  # Union all our referenced ASOP nos."
"0","  asop_all_refs <- asop_refs %>% "
"0","    union_all(asop_mult_refs1) %>% "
"0","    union_all(asop_mult_refs2)"
"0","  "
"0","  # return our tibble"
"0","  asop_all_refs"
"0","}"
"0",""
"0","# Let's test our function on the well-known Data Quality ASOP"
"0","# foo <- map_reference_tibble(final_asop_summary_table$asop_urls[23])"
"0",""
"0","# Looks like we're in business. Let's run the map on the entire ASOP meta-table."
"0","asop_reference_urls <- as.list(final_asop_summary_table$asop_urls)"
"0",""
"0","# This one takes some time to run - but not too long. Enjoy a nice snack and think about how much more this rules than a for loop"
"0","asop_references_nested <- asop_reference_urls %>% "
"0","  map(map_reference_tibble) %>% "
"0","  enframe()"
"0",""
"0","# Finally, we left-join back to our primary table:"
"0","final_asop_summary_table <- final_asop_summary_table %>% "
"0","  left_join(asop_references_nested, by=c(""asop_number""=""name""))"
"0",""
